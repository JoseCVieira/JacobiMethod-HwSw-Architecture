 /**************************\
 * Co-Projecto Hw/Sw        *
 *                          *
 * Part 1 - proj_p1.c       *
 *                          *
 * Group 11                 *
 *                          *
 * João Ramiro - 81138      *
 * José Vieira - 90900      *
 *                          *
 \**************************/

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "xtime_l.h"

/* Define sizeof */
#define MATSIZE     8
#define INT_SIZE    4
#define MATRIX_SIZE INT_SIZE*MATSIZE*MATSIZE
#define VECTOR_SIZE INT_SIZE*MATSIZE

/* Define max error of gauss method */
#define MAX_ERROR 0.0000001

/* Define pointers to each memory */
volatile int *memA, *memB, *memRes;
volatile float *memX, *memA_D_Inv;

/* Define a macro to each memory */
#define A(I,J)     (memA[I*MATSIZE+J])
#define B(I)       (memB[I])
#define X(I)       (memX[I])
#define A_D_INV(I) (memA_D_Inv[I])
#define RES(I)     (memRes[I])

/* Define base address of each memory */
#define A_START_ADD   0x10000000
#define B_START_ADD   (A_START_ADD + MATRIX_SIZE)
#define X_START_ADD   (B_START_ADD + VECTOR_SIZE)
#define A_D_INV_ADD   (X_START_ADD + VECTOR_SIZE)
#define RES_START_ADD (A_D_INV_ADD + VECTOR_SIZE)

/* Methods */
void show_results(int n_it, float* memX, unsigned long long int clock_cycles, float u_sec);
unsigned my_receive_from_fifo(void *BufPtr, unsigned nWords);
unsigned my_send_to_fifo(void *BufPtr, unsigned nWords);
int my_axis_fifo_init();

int main() {
    XTime tStart, tEnd;
    unsigned nwords;
    int i;

    /* Points each pointer to the respective base address */
    memA       = (int *)(A_START_ADD);
    memB       = (int *)(B_START_ADD);
    memRes     = (int *)(RES_START_ADD);
    memX       = (float *)(X_START_ADD);
    memA_D_Inv = (float *)(A_D_INV_ADD);

    /* Start measuring time */
    XTime_GetTime(&tStart);

    for (i = 0; i < MATSIZE; i++){
        /* Get the inverse of A(i,i) and
         * apply the "if(i!=j)" in gauss method
         * by putting the diagonal to 0
         */
        A_D_INV(i) = 1.0f/A(i,i);
        A(i,i) = 0;
    }

    /* Initialize fifo */
    my_axis_fifo_init();

    /* Send to fifo vector X */
    nwords = my_send_to_fifo((void *)memX, MATSIZE);

    /* Send to fifo matrix A */
    nwords = my_send_to_fifo((void *)memA, MATSIZE*MATSIZE);

    /* Receive from fifo vector Res */
    nwords = my_receive_from_fifo((void *)memRes, MATSIZE);

    /* Gauss jacobi - only one iteration thus do not have a stop condition */
    for (i = 0; i < MATSIZE; i++)
        X(i) = (float)A_D_INV(i)*(B(i)-RES(i));

    /* End measuring time */
    XTime_GetTime(&tEnd);

    /* Show results */
    show_results(1, memX, 2*(tEnd-tStart), 1.0*(tEnd-tStart)/(COUNTS_PER_SECOND/1000000));

    return 0;
}

void show_results(int n_it, float* X, unsigned long long int clock_cycles, float u_sec) {
    float aux;
    int i, j;

    printf("-- Gauss Jacobi => [A]*[X]=[B], A[n*n], X[n*1], B[n*1]\n");

    printf("\nCoefficient matrix - A=\n");
    for(i = 0; i < MATSIZE; i++) {
        for(j = 0; j < MATSIZE; j++)
            printf("%3d ", A(i,j));
        printf("\n");
    }

    printf("\nMultiplication result - B=\n");
    for(i = 0; i < MATSIZE; i++)
        printf("%3d\n", B(i));

    printf("\nSolution - X=\n");
    for(i = 0; i < MATSIZE; i++)
        printf("%f\n", X[i]);

    printf("\nNumber iterations - M=\n%d\n", n_it);

    printf("\nError - |B-(A*X)|=\n");

    for(i = 0; i < MATSIZE; i++){
        aux = 0;
        for(j = 0; j < MATSIZE; j++)
            aux += A(i,j)*X(j);
        printf("%f\n", fabs(B(i)-aux));
    }

    printf("\nclock cycles=\n%llu\n", clock_cycles);
    printf("\ntime(us)=\n%.2f\n\n", u_sec);
}


