#include "gauss_jacobi1.h"

/* DMA functions */
int init_XAxiDma_SimplePollMode(u16 DeviceId, XAxiDma *AxiDma) {
	XAxiDma_Config *CfgPtr;
	int Status;

	/* Initialize the XAxiDma device.	 */
	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}

	Status = XAxiDma_CfgInitialize(AxiDma, CfgPtr);
	if (Status != XST_SUCCESS) {
		printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if(XAxiDma_HasSg(AxiDma)){
		printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode	 */
	XAxiDma_IntrDisable(AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;
}

/* Show results function */
void show_results(volatile float* memA_D_Inv, int n_it, unsigned long long int clock_cycles, float u_sec) {
    int i, j;
    float aux;

    printf("-- Gauss Jacobi => [A]*[X]=[B], A[n*n], X[n*1], B[n*1]\n");

    printf("\nCoefficient matrix - A=\n");
    for(i = 0; i < MATSIZE; i++) {
        for(j = 0; j < MATSIZE; j++){
        	if(fabs(A(i,j)) < 1E-3 && A(i,j)!=0)
        		printf("%3.3f ", 1E-3);
        	else
        		printf("%3.3f ", A(i,j));
        }
        printf("\n");
    }

    printf("\nMultiplication result - B=\n");
    for(i = 0; i < MATSIZE; i++){
		if(fabs(memB[i]) < 1E-3 && memB[i]!=0)
			printf("%3.3f ", 1E-3);
		else
			printf("%3.3f ", memB[i]);
    	printf("\n");
    }

    printf("\nMultiplication result(HW) - Res=\n");
	for(i = 0; i < MATSIZE; i++){
		if(fabs(memRes[i]) < 1E-3 && memRes[i]!=0)
			printf("%3.3f ", 1E-3);
		else
			printf("%3.3f ", memRes[i]);
		printf("\n");
	}

    printf("\nSolution - X=\n");
    for(i = 0; i < MATSIZE; i++){
    	if(fabs(memX[i]) < 1E-3 && memX[i]!=0)
			printf("%3.3f ", 1E-3);
		else
			printf("%3.3f ", memX[i]);
    	printf("\n");
    }

    printf("\nNumber iterations - M=\n%d\n", n_it);

    printf("\nError - |B-(A*X)|=\n");
    for(i = 0; i < MATSIZE; i++){
        aux = 0;
        for(j = 0; j < MATSIZE; j++){
        	if(i != j)
        		aux += A(i,j)*memX[j];
        	else
        		aux += (1/memA_D_Inv[i])*memX[j];
        }
        if(fabs(memB[i]-aux) < 1E-3 && fabs(memB[i]-aux) != 0)
        	printf("%3.3f ", 1E-3);
        else
        	printf("%3.3f", fabs(memB[i]-aux));

        printf("\n");
    }

    printf("\nclock cycles=\n%llu\n", clock_cycles);
    printf("\ntime(us)=\n%.2f\n\n", u_sec);
}

