/*
 * gauss_jacobi1.c
 *
 *  Created on: 25/05/2018
 *      Author: Ramiro
 */

/*
* Co-Projecto Hw/Sw
*
* Group 11
* João Ramiro - 81138
* José Vieira - 90900
*
* gauss_jacobi.c
*/


#include "gauss_jacobi1.h"

/* Semaphore flags*/
#define PROC0_STARTED 11
#define PROC1_STARTED 22
#define PROC1_COMPLETED 33

int main() {
	int i, status, n_it = 0;
	float x[MATSIZE], normVal = MAX_ERROR + 1;

	//status = init_XAxiDma_SimplePollMode(DMA_DEV_ID_1, &AxiDma_1);
	if (status != XST_SUCCESS) {
		printf("init_XAxiDma_SimplePollMode: Failed\r\n");
		return XST_FAILURE;
	}

	Xil_DCacheInvalidate();

	memA       = (float *)(A_START_ADD);
	memA_D_Inv = (float *)(A_D_INV_ADD);

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);

	volatile int *sync_f = (int *)0xFFFF0000;

	while (*sync_f != PROC0_STARTED); // Wait for P0
	*sync_f = PROC1_STARTED;


	while(normVal > MAX_ERROR && n_it < 1){
		// send memX
		status = XAxiDma_SimpleTransfer(&AxiDma_1,(UINTPTR)memX, VECTOR_SIZE, XAXIDMA_DMA_TO_DEVICE);
		if (status != XST_SUCCESS) return XST_FAILURE;
		while (XAxiDma_Busy(&AxiDma_1, XAXIDMA_DMA_TO_DEVICE)) { /* Wait for Tx*/ }

		// receive memRes
		Xil_DCacheInvalidateRange((INTPTR)memRes, VECTOR_SIZE);

		status = XAxiDma_SimpleTransfer(&AxiDma_1,(UINTPTR)memRes + VECTOR_SIZE/2, VECTOR_SIZE/2, XAXIDMA_DEVICE_TO_DMA);
		if (status != XST_SUCCESS) return XST_FAILURE;

		// send full matrix A
		status = XAxiDma_SimpleTransfer(&AxiDma_1,(UINTPTR)memA + MATRIX_SIZE/2, MATRIX_SIZE/2, XAXIDMA_DMA_TO_DEVICE);
		if (status != XST_SUCCESS) return XST_FAILURE;

		while (XAxiDma_Busy(&AxiDma_1,XAXIDMA_DMA_TO_DEVICE)) { /* Wait Tx */ }

		while (XAxiDma_Busy(&AxiDma_1,XAXIDMA_DEVICE_TO_DMA)) { /* Wait Rx*/ }

		normVal = 0;
		for (i = MATSIZE/2; i < MATSIZE; i++){
			x[i] = memX[i];
			memX[i] = (float)memA_D_Inv[i] * (memB[i]-memRes[i]);
			normVal += (x[i] - memX[i]) * (x[i] - memX[i]);
		}

		Xil_DCacheFlushRange((INTPTR)memX, (unsigned)(VECTOR_SIZE));

		n_it++;
	}

	*sync_f = PROC1_COMPLETED;



}


/*int init_XAxiDma_SimplePollMode(u16 DeviceId, XAxiDma *AxiDma) {
	XAxiDma_Config *CfgPtr;
	int Status;

	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}

	Status = XAxiDma_CfgInitialize(AxiDma, CfgPtr);
	if (Status != XST_SUCCESS) {
		printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if(XAxiDma_HasSg(AxiDma)){
		printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	XAxiDma_IntrDisable(AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;
}*/
