/*
* Co-Projecto Hw/Sw
*
* Group 11
* João Ramiro - 81138
* José Vieira - 90900
*
* gauss_jacobi1.c
*/

#include "gauss_jacobi1.h"

/* Define pointers to sync memory */
volatile int *sync_f = (int *)0xFFFF0000;

int main() {
	float x[MATSIZE/2], normVal;
	int i, it = 0;

	//Xil_DCacheDisable();
	Xil_DCacheInvalidate();

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000, 0x14de2);

	/* Points each pointer to the respective base address */
	memA       = (float *)(A_START_ADD);
	memB       = (float *)(B_START_ADD);
	memRes     = (float *)(RES_START_ADD);
	memX       = (float *)(X_START_ADD);
	memA_D_Inv = (float *)(A_D_INV_ADD);
	norm_value = (float *)(NORM_ADD);

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);

	volatile int *sync_f = (int *)0xFFFF0000;

	while(1) {
		while (*sync_f != PROC0_STARTED);
		*sync_f = PROC1_STARTED;

		if(!it) Xil_DCacheInvalidateRange((INTPTR)memA_D_Inv + VECTOR_SIZE/2, VECTOR_SIZE/2);
		Xil_DCacheInvalidateRange((INTPTR)memRes + VECTOR_SIZE/2, VECTOR_SIZE/2);

		normVal = 0;
		for (i = MATSIZE/2; i < MATSIZE; i++){
			x[i-(MATSIZE/2)] = memX[i];
			memX[i] = (float)memA_D_Inv[i] * (memB[i]-memRes[i]);
			normVal += (x[i-(MATSIZE/2)] - memX[i]) * (x[i-(MATSIZE/2)] - memX[i]);
		}
		*norm_value = normVal;

		Xil_DCacheFlushRange((INTPTR)memX + VECTOR_SIZE/2, (unsigned)(VECTOR_SIZE/2));
		Xil_DCacheFlushRange((INTPTR)norm_value, (unsigned)(FLOAT_SIZE));

		*sync_f = PROC1_COMPLETED;
	}
}

int init_XAxiDma_SimplePollMode(u16 DeviceId, XAxiDma *AxiDma) {
	XAxiDma_Config *CfgPtr_1;

	CfgPtr_1 = XAxiDma_LookupConfig(DeviceId);

	/* Initialize the XAxiDma device.	 */
	/*if(!(CfgPtr = XAxiDma_LookupConfig(DeviceId))){
		printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}

	/*if (XAxiDma_CfgInitialize(AxiDma, CfgPtr) != XST_SUCCESS) {
		printf("Initialization failed \r\n");
		return XST_FAILURE;
	}

	if(XAxiDma_HasSg(AxiDma)){
		printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode	 */
	/*XAxiDma_IntrDisable(AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);*/

	return XST_SUCCESS;
}
