/*
 * gauss_jacobi1.c
 *
 *  Created on: 25/05/2018
 *      Author: Ramiro
 */

/*
* Co-Projecto Hw/Sw
*
* Group 11
* João Ramiro - 81138
* José Vieira - 90900
*
* gauss_jacobi.c
*/

#include "gauss_jacobi1.h"

/* Define pointers to sync memory */
volatile int *sync_f = (int *)0xFFFF0000;

int main() {
	float x[MATSIZE], normVal = MAX_ERROR + 1;

	Xil_DCacheDisable();
	//Xil_DCacheInvalidate();

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);

	/* Points each pointer to the respective base address */
	memA       = (float *)A_START_ADD;
	memB       = (float *)B_START_ADD;
	memRes     = (float *)RES_START_ADD;
	memX       = (float *)X_START_ADD;
	memA_D_Inv = (float *)A_D_INV_ADD;
	norm_value = (float *)NORM_ADD;

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);

	volatile int *sync_f = (int *)0xFFFF0000;

	while (*sync_f != PROC0_STARTED);
	*sync_f = PROC1_STARTED;

	int i, a =1;
	while(a<10000000) a++;

	normVal = 0;
	for (i = 0; i < MATRIX_SIZE; i++){
		//norm_value[i] = memA[i];
		x[i] = memX[i];
		norm_value[i] = memX[i] = (float)memA_D_Inv[i] * (memB[i]-memRes[i]);
		//normVal += (x[i] - memX[i]) * (x[i] - memX[i]);
	}

	/*for(i = 0; i < MATSIZE; i++) {
		norm_value[i] = memA_D_Inv[i];
	}*/


	*sync_f = PROC1_COMPLETED;
}
