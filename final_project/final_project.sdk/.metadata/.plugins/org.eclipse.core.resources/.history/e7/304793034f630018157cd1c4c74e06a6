/*
 * gauss_jacobi1.c
 *
 *  Created on: 25/05/2018
 *      Author: Ramiro
 */

/*
* Co-Projecto Hw/Sw
*
* Group 11
* João Ramiro - 81138
* José Vieira - 90900
*
* gauss_jacobi.c
*/

#include "gauss_jacobi1.h"

/* Define pointers to sync memory */
volatile int *sync_f = (int *)0xFFFF0000;

int main() {
	float x[MATSIZE], normVal = MAX_ERROR + 1;

	Xil_DCacheDisable();
	//Xil_DCacheInvalidate();

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);

	/* Points each pointer to the respective base address */
	memA       = (float *)A_START_ADD;
	memB       = (float *)B_START_ADD;
	memRes     = (float *)RES_START_ADD;
	memX       = (float *)X_START_ADD;
	memA_D_Inv = (float *)A_D_INV_ADD;
	norm_value = (float *)NORM_ADD;

	// Disable cache on OCM region
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);

	volatile int *sync_f = (int *)0xFFFF0000;

	while (*sync_f != PROC0_STARTED);
	*sync_f = PROC1_STARTED;

	Xil_DCacheInvalidateRange((INTPTR)memA, (unsigned)(MATRIX_SIZE));
	Xil_DCacheInvalidateRange((INTPTR)memB, (unsigned)(VECTOR_SIZE));
	Xil_DCacheInvalidateRange((INTPTR)memRes, (unsigned)(VECTOR_SIZE));
	Xil_DCacheInvalidateRange((INTPTR)memX, (unsigned)(VECTOR_SIZE));
	Xil_DCacheInvalidateRange((INTPTR)memA_D_Inv, (unsigned)(VECTOR_SIZE));

	int i, j, a =1;
	while(a<10000000) a++;

    for(i = 0; i < MATSIZE; i++) {
        for(j = 0; j < MATSIZE; j++){
        	if(fabs(A(i,j)) < 1E-3 && A(i,j)!=0)
        		printf("%3.3f ", 1E-3);
        	else
        		printf("%3.3f ", A(i,j));
        }
        printf("\n");
    }

    printf("\nMultiplication result - B=\n");
    for(i = 0; i < MATSIZE; i++){
		if(fabs(memB[i]) < 1E-3 && memB[i]!=0)
			printf("%3.3f ", 1E-3);
		else
			printf("%3.3f ", memB[i]);
    	printf("\n");
    }

    printf("\nMultiplication result(HW) - Res=\n");
	for(i = 0; i < MATSIZE; i++){
		if(fabs(memRes[i]) < 1E-3 && memRes[i]!=0)
			printf("%3.3f ", 1E-3);
		else
			printf("%3.3f ", memRes[i]);
		printf("\n");
	}

	normVal = 0;
	for (i = 0; i < MATSIZE; i++){
		x[i] = memX[i];
		memX[i] = (float)memA_D_Inv[i] * (memB[i]-memRes[i]);
		normVal += (x[i] - memX[i]) * (x[i] - memX[i]);
	}
	*norm_value = normVal;

	Xil_DCacheFlushRange((INTPTR)norm_value, (unsigned)(FLOAT_SIZE));

	*sync_f = PROC1_COMPLETED;
}
